# This GitHub workflow validates Bundle config (ML resource config and more)
# defined under mlops_stacks_demo/resources/*
# and mlops_stacks_demo/databricks.yml, when PRs are merged into the main branch
name: Bundle validation for mlops_stacks_demo

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'mlops_stacks_demo/**'

defaults:
  run:
    working-directory: ./mlops_stacks_demo/

env:
  DATABRICKS_HOST_STAGING: ${{ vars.DATABRICKS_HOST_STAGING }} #STAGING_
  DATABRICKS_CLIENT_ID_STAGING: ${{ vars.DATABRICKS_CLIENT_ID_STAGING }} #STAGING_
  DATABRICKS_CLIENT_SECRET_STAGING: ${{ secrets.DATABRICKS_CLIENT_SECRET_STAGING }} #STAGING_
  # STAGING_WORKSPACE_TOKEN: ${{ secrets.STAGING_WORKSPACE_TOKEN }}
  
  DATABRICKS_HOST_PROD: ${{ vars.DATABRICKS_HOST_PROD }} #PROD_
  DATABRICKS_CLIENT_ID_PROD: ${{ vars.DATABRICKS_CLIENT_ID_PROD }} #PROD_
  DATABRICKS_CLIENT_SECRET_PROD: ${{ secrets.DATABRICKS_CLIENT_SECRET_PROD }} #PROD_
  # PROD_DATABRICKS_TOKEN: ${{ secrets.PROD_WORKSPACE_TOKEN }}
  
jobs:
  staging:
    concurrency: mlops_stacks_demo-staging-bundle-job
    # runs-on: ubuntu-latest
    runs-on:
      group: databricks-field-eng-protected-runner-group
      labels: ubuntu-latest #linux-ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - uses: databricks/setup-cli@v0.229.0
      - name: Validate Bundle For Staging
        id: validate
        env:
          DATABRICKS_HOST: ${{ env.DATABRICKS_HOST_STAGING }} ## STAGING_
          DATABRICKS_CLIENT_ID: ${{ env.DATABRICKS_CLIENT_ID_STAGING }} #STAGING_
          DATABRICKS_CLIENT_SECRET: ${{ env.DATABRICKS_CLIENT_SECRET_STAGING }} #STAGING_
          # DATABRICKS_TOKEN: ${{ env.STAGING_WORKSPACE_TOKEN }}
        run: |
          # databricks bundle validate -t mlops_staging

      ### commenting out because `HttpError: Resource not accessible by integration` with SP  
      #   run: |
      #     databricks bundle validate -t mlops_staging > ../validate_output.txt
      # - name: Create Comment with Bundle Configuration
      #   uses: actions/github-script@v6
      #   id: comment
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }} 
      #     script: |
      #       const fs = require('fs');
      #       const fileContents = fs.readFileSync('validate_output.txt', 'utf8');
      #       const output = `#### Bundle Staging Config Validated ðŸ–Œ
      #       <details><summary>Staging Validation Output</summary>

      #       \`\`\`\n
      #       ${fileContents}
      #       \`\`\`

      #       </details>`

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

  prod:
    concurrency: mlops_stacks_demo-prod-bundle-job
    # runs-on: ubuntu-latest
    runs-on:
      group: databricks-field-eng-protected-runner-group
      labels: ubuntu-latest #ubuntu-20.04 #linux-ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - uses: databricks/setup-cli@v0.229.0
      - name: Validate Bundle For Prod
        id: validate
        env:
          DATABRICKS_HOST: ${{ env.DATABRICKS_HOST_PROD }} #PROD_         
          DATABRICKS_CLIENT_ID: ${{ env.DATABRICKS_CLIENT_ID_PROD }} #PROD_
          DATABRICKS_CLIENT_SECRET: ${{ env.DATABRICKS_CLIENT_SECRET_PROD }} #PROD_
          # DATABRICKS_TOKEN: ${{ env.PROD_WORKSPACE_TOKEN }}

        run: |
          databricks bundle validate -t mlops_prod          

      ### commenting out because `HttpError: Resource not accessible by integration` with SP 
      #   run: |
      #     databricks bundle validate -t mlops_prod > ../validate_output.txt
      # - name: Create Comment with Bundle Configuration
      #   uses: actions/github-script@v6
      #   id: comment
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const fs = require('fs');
      #       const fileContents = fs.readFileSync('validate_output.txt', 'utf8');
      #       const output = `#### Bundle Prod Config Validated ðŸ–Œ
      #       <details><summary>Prod Validation Output</summary>

      #       \`\`\`\n
      #       ${fileContents}
      #       \`\`\`

      #       </details>`

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })
